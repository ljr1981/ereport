note
	description: "Representation of a {PDF_STREAM_TABLE}."

class
	PDF_STREAM_TABLE

create
	default_create,
	make

feature {NONE} -- Initialization

	make (a_row_count, a_col_count: INTEGER; a_entry_basis: detachable like entry_basis)
			--
		do
			if attached a_entry_basis as al_entry_basis then
				create table.make_filled (al_entry_basis, a_row_count, a_col_count)
			else
				create table.make_filled (entry_basis, a_row_count, a_col_count)
			end
		end

feature -- Access

	table: FW_ARRAY2_EXT [PDF_STREAM_ENTRY]
			-- `table' of Current.
		attribute
			create Result.make_filled (entry_basis, row_count, column_count)
		end

	linked: LINKED_LIST [PDF_STREAM_ENTRY]
		do
			create Result.make
			across
				table as ic
			loop
				Result.force (ic.item)
			end
		end

	row_count: INTEGER
			-- `row_count' of `table'.
		do
			Result := table.row_count
		end

	column_count: INTEGER
			-- `column_count' of `table'.
		do
			Result := table.column_count
		end

	entry_basis: PDF_STREAM_ENTRY
			--
		attribute
			create Result.make_with_font (create {PDF_FONT}.make ("Fx"))
		end

	x,
	y: INTEGER

	first_font_number,
	last_font_number: INTEGER

	first_page_number,
	last_page_number: INTEGER

	first_stream_number,
	last_stream_number: INTEGER

feature -- Settings

	set_default_entry (a_entry: like entry_basis)
			--
		require
			has_font_name: not a_entry.font_name.is_empty
		do
			entry_basis := a_entry
		end

feature -- Output

	generate (a_last_font_number, a_last_page_number, a_last_stream_number: INTEGER)
			-- `generate' Current to `fonts', `pages', and `streams'.
		local
			l_font_number: INTEGER
		do
				-- FONTS
			across
				table as ic_table
			from
				l_font_number := a_last_font_number + 1
			loop
				ic_table.item.font.set_object_number (l_font_number)
				l_font_number := l_font_number + 1
				fonts.force (ic_table.item.font, ic_table.item.font_basefont)
			end
		end

	fonts: HASH_TABLE [PDF_FONT, STRING] -- str = font_basefont name
			-- `fonts' generated by `generate'.
		attribute
			create Result.make (10)
		end

	pages: HASH_TABLE [PDF_PAGE, INTEGER] -- int = page#
			-- `pages' generated by `generate'.
		attribute
			create Result.make (10)
		end

	streams: HASH_TABLE [PDF_STREAM_PLAIN_TEXT, INTEGER] -- int = stream#
			-- `streams' generated by `generate'.
		attribute
			create Result.make (10)
		end

note
	goal: "[
		Given a `table' (2-dim), generate the resulting:
		
		1. Font objects
		2. Pages objects
		3. Stream objects
		]"

end
